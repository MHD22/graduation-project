{"ast":null,"code":"var _jsxFileName = \"/Users/mhd.sad22/graduation-project/graduation-project/src/components/TeacherRegister.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport Swal from 'sweetalert2';\n\nclass TeacherRegister extends Component {\n  constructor() {\n    super();\n\n    this.newTeacher = e => {\n      e.preventDefault();\n      let formTeacher = document.getElementById('formTeacher');\n      let teacherData = {\n        firstName: formTeacher.fname.value,\n        lastName: formTeacher.lname.value,\n        email: formTeacher.email.value,\n        password: formTeacher.tpassword.value,\n        id_number: formTeacher.t_id.value\n      };\n      this.setState({\n        teacherData\n      }); // this.clearForm() ;\n\n      if (teacherData.firstName && teacherData.lastName && teacherData.password && teacherData.id_number && teacherData.email) {\n        this.storeTeacherDataInDB(teacherData);\n      } else {\n        Swal.fire({\n          icon: 'warning',\n          title: 'Hmmm ..',\n          html: '<h5 class=\"text-warning font-lobster mt-2\">All fields are required</h5>'\n        });\n      }\n    };\n\n    this.storeTeacherDataInDB = teacherData => {\n      let {\n        email,\n        id_number\n      } = teacherData;\n      let bodyData = {\n        email,\n        id_number\n      };\n      fetch('http://localhost:3000/teachers', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(bodyData)\n      }).then(res => res.json()).then(res => {\n        if (res === 'Teacher Is Already Exist.') {\n          Swal.fire({\n            icon: 'error',\n            title: 'Oops ...',\n            html: '<h5 class=\"text-danger font-lobster mt-2\">Teacher Email or ID is already exist</h5>'\n          });\n        } else {\n          let start = res.indexOf('token:'); //5\n\n          if (start !== -1) {\n            let hashedToken = res.slice(6);\n            this.setState({\n              hashedToken\n            });\n            document.getElementsByClassName('registerAsButton')[0].style.display = 'none';\n            document.getElementsByClassName('registerAsButton')[1].style.display = 'none';\n            Swal.fire({\n              title: '<h3 class=\"font-acme\">Enter the verification code sent to your email :</3>',\n              icon: 'question',\n              iconHtml: 'ØŸ',\n              html: '<input type=\"text\" id=\"token\" class=\"form-control text-center\" placeholder=\"Verification Code\" name=\"token\"/>'\n            }).then(() => {\n              this.saveTeacher();\n            });\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Oops ...',\n              html: '<h5 class=\"text-danger font-lobster mt-2\">Something wrong , pleaase try again later</h5>'\n            });\n          }\n        }\n      }).catch(\"error during send Teacher data to backend\");\n    };\n\n    this.clearForm = () => {\n      document.getElementById('fname').value = \"\";\n      document.getElementById('lname').value = \"\";\n      document.getElementById('t_id').value = \"\";\n      document.getElementById('tpassword').value = \"\";\n    };\n\n    this.handleClose = e => {\n      this.setState({\n        show: false\n      });\n    };\n\n    this.done = e => {\n      this.setState({\n        redirect: true\n      });\n    };\n\n    this.saveTeacher = () => {\n      console.log(\"Hello world!!\");\n      let token = document.getElementById('token').value;\n\n      if (token) {\n        let teacherData = Object.assign({}, this.state.teacherData);\n        let {\n          hashedToken\n        } = this.state;\n        teacherData.hashedToken = hashedToken;\n        teacherData.token = token;\n        console.log(teacherData, \" <= teacher data.  \");\n        fetch('http://localhost:3000/teacherRegister', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(teacherData)\n        }).then(res => res.json()).then(res => {\n          if (res === 'Teacher Added Successfully') {\n            Swal.fire({\n              icon: 'success',\n              title: 'Success',\n              html: '<h5 class=\"text-success font-lobster mt-2\">Teacher Added Successfully</h5>'\n            });\n            this.storedUserInSession(this.state.teacherData);\n            setTimeout(() => {\n              this.goToHomePage();\n            }, 2000);\n          } else {\n            Swal.fire({\n              icon: 'error',\n              title: 'Oops ..!',\n              html: '<h5 class=\"text-danger font-lobster mt-2\">Invalid Token</h5>'\n            });\n          }\n        }).catch(e => {\n          console.log(\"error when storing teacher data with the tokens.\", e);\n        });\n      } else {\n        Swal.fire({\n          icon: 'error',\n          title: 'Oops ..!',\n          html: '<h5 class=\"text-danger font-lobster mt-2\">Invalid Token</h5>'\n        });\n      }\n    };\n\n    this.storedUserInSession = userData => {\n      const {\n        firstName,\n        lastName,\n        id_number\n      } = userData;\n      const storedData = {\n        firstName,\n        lastName,\n        id_number\n      };\n      sessionStorage.setItem('teacher', JSON.stringify(storedData));\n    };\n\n    this.goToHomePage = () => {\n      window.location.replace(\"http://localhost:3001\");\n    };\n\n    this.state = {\n      verified: false,\n      teacherData: {},\n      hashedToken: '',\n      route: null\n    };\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 20\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n      id: \"formTeacher\",\n      hidden: this.state.verified,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"fname\",\n      placeholder: \"First Name ..\",\n      className: \"form-input mt-4\",\n      name: \"fname\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Last Name ..\",\n      className: \"form-input mt-4\",\n      id: \"lname\",\n      name: \"lname\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      placeholder: \"Email ..\",\n      className: \"form-input mt-4\",\n      id: \"email\",\n      name: \"email\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"t_id\",\n      placeholder: \"Teacher ID ..\",\n      className: \"form-input mt-4\",\n      name: \"t_id\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      placeholder: \"Password ..\",\n      className: \"form-input mt-4\",\n      name: \"tpassword\",\n      id: \"tpassword\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-success btn-submit mt-4\",\n      onClick: this.newTeacher,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }, \"Register\")));\n  }\n\n}\n\nexport default TeacherRegister;","map":{"version":3,"sources":["/Users/mhd.sad22/graduation-project/graduation-project/src/components/TeacherRegister.js"],"names":["React","Component","Redirect","Swal","TeacherRegister","constructor","newTeacher","e","preventDefault","formTeacher","document","getElementById","teacherData","firstName","fname","value","lastName","lname","email","password","tpassword","id_number","t_id","setState","storeTeacherDataInDB","fire","icon","title","html","bodyData","fetch","method","headers","body","JSON","stringify","then","res","json","start","indexOf","hashedToken","slice","getElementsByClassName","style","display","iconHtml","saveTeacher","catch","clearForm","handleClose","show","done","redirect","console","log","token","Object","assign","state","storedUserInSession","setTimeout","goToHomePage","userData","storedData","sessionStorage","setItem","window","location","replace","verified","route","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport Swal from 'sweetalert2';\n\nclass TeacherRegister extends Component {\n    constructor() {\n        super();\n        this.state = {\n            verified: false,\n            teacherData: {},\n            hashedToken: '',\n            route: null,\n\n        }\n    }\n    newTeacher = (e) => {\n        e.preventDefault();\n        let formTeacher = document.getElementById('formTeacher');\n        let teacherData = {\n            firstName: formTeacher.fname.value,\n            lastName: formTeacher.lname.value,\n            email: formTeacher.email.value,\n            password: formTeacher.tpassword.value,\n            id_number: formTeacher.t_id.value,\n        }\n        this.setState({ teacherData });\n\n        // this.clearForm() ;\n\n        if (teacherData.firstName && teacherData.lastName && teacherData.password && teacherData.id_number && teacherData.email) {\n            this.storeTeacherDataInDB(teacherData);\n        }\n        else {\n            Swal.fire({\n                icon: 'warning',\n                title: 'Hmmm ..',\n                html: '<h5 class=\"text-warning font-lobster mt-2\">All fields are required</h5>',\n            })\n        }\n    }\n\n    storeTeacherDataInDB = (teacherData) => {\n        let { email, id_number } = teacherData;\n        let bodyData = { email, id_number };\n        fetch('http://localhost:3000/teachers', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(bodyData),\n        })\n            .then(res => res.json())\n            .then(res => {\n\n                if (res === 'Teacher Is Already Exist.') {\n                    Swal.fire({\n                        icon: 'error',\n                        title: 'Oops ...',\n                        html: '<h5 class=\"text-danger font-lobster mt-2\">Teacher Email or ID is already exist</h5>',\n                    })\n                }\n                else {\n                    let start = res.indexOf('token:'); //5\n                    if (start !== -1) {\n                        let hashedToken = res.slice(6);\n                        this.setState({ hashedToken })\n                        document.getElementsByClassName('registerAsButton')[0].style.display = 'none';\n                        document.getElementsByClassName('registerAsButton')[1].style.display = 'none';\n                        Swal.fire({\n                            title: '<h3 class=\"font-acme\">Enter the verification code sent to your email :</3>',\n                            icon: 'question',\n                            iconHtml: 'ØŸ',\n                            html: '<input type=\"text\" id=\"token\" class=\"form-control text-center\" placeholder=\"Verification Code\" name=\"token\"/>',\n                        }).then(() => {\n                            this.saveTeacher();\n                        });\n                    }\n                    else {\n                        Swal.fire({\n                            icon: 'error',\n                            title: 'Oops ...',\n                            html: '<h5 class=\"text-danger font-lobster mt-2\">Something wrong , pleaase try again later</h5>',\n                        })\n                    }\n                }\n            })\n            .catch(\"error during send Teacher data to backend\");\n    };\n\n    clearForm = () => {\n        document.getElementById('fname').value = \"\";\n        document.getElementById('lname').value = \"\";\n        document.getElementById('t_id').value = \"\";\n        document.getElementById('tpassword').value = \"\";\n    }\n\n    handleClose = (e) => {\n        this.setState({\n            show: false\n        });\n    }\n\n    done = (e) => {\n        this.setState({\n            redirect: true\n        });\n    }\n    saveTeacher = () => {\n        console.log(\"Hello world!!\");\n        let token = document.getElementById('token').value;\n        if (token) {\n            let teacherData = Object.assign({}, this.state.teacherData);\n            let { hashedToken } = this.state;\n            teacherData.hashedToken = hashedToken;\n            teacherData.token = token;\n            console.log(teacherData, \" <= teacher data.  \");\n\n            fetch('http://localhost:3000/teacherRegister', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(teacherData),\n            })\n                .then(res => res.json())\n                .then(res => {\n                    if (res === 'Teacher Added Successfully') {\n                        Swal.fire({\n                            icon: 'success',\n                            title: 'Success',\n                            html: '<h5 class=\"text-success font-lobster mt-2\">Teacher Added Successfully</h5>',\n                        })\n                        this.storedUserInSession(this.state.teacherData);\n                        setTimeout(() => {\n                            this.goToHomePage();\n                        }, 2000);\n                    }\n                    else {\n                        Swal.fire({\n                            icon: 'error',\n                            title: 'Oops ..!',\n                            html: '<h5 class=\"text-danger font-lobster mt-2\">Invalid Token</h5>',\n                        })\n                    }\n                })\n                .catch(e => { console.log(\"error when storing teacher data with the tokens.\", e) });\n        }\n        else {\n            Swal.fire({\n                icon: 'error',\n                title: 'Oops ..!',\n                html: '<h5 class=\"text-danger font-lobster mt-2\">Invalid Token</h5>',\n            })\n        }\n    }\n    storedUserInSession = (userData) => {\n        const { firstName, lastName, id_number } = userData;\n        const storedData = { firstName, lastName, id_number };\n        sessionStorage.setItem('teacher', JSON.stringify(storedData));\n    }\n    goToHomePage = () => {\n        window.location.replace(\"http://localhost:3001\");\n    }\n\n    render() {\n\n        if (this.state.redirect) {\n            return <Redirect to='/' />;\n        }\n\n        return (\n            <>\n                <form id=\"formTeacher\" hidden={this.state.verified}>\n                    <input type=\"text\" id=\"fname\" placeholder=\"First Name ..\" className=\"form-input mt-4\" name=\"fname\" required />\n                    <br />\n                    <input type=\"text\" placeholder=\"Last Name ..\" className=\"form-input mt-4\" id=\"lname\" name=\"lname\" required />\n                    <br />\n                    <input type=\"email\" placeholder=\"Email ..\" className=\"form-input mt-4\" id=\"email\" name=\"email\" required />\n                    <br />\n                    <input type=\"text\" id=\"t_id\" placeholder=\"Teacher ID ..\" className=\"form-input mt-4\" name=\"t_id\" required />\n                    <br />\n                    <input type=\"password\" placeholder=\"Password ..\" className=\"form-input mt-4\" name=\"tpassword\" id=\"tpassword\" required />\n                    <br />\n                    <button type=\"submit\" className=\"btn btn-success btn-submit mt-4\" onClick={this.newTeacher} >\n                        Register\n                </button>\n                </form>\n                {/* <form hidden={! this.state.verified} >\n                <fieldset >\n                    <legend>Verification</legend>\n                    <label htmlFor=\"token\">Enter your access token Which sent on your email:</label>\n                    <br/>\n                    <input type=\"text\" id=\"token\" placeholder=\"Access token\" className=\"form-input mt-4\" name=\"token\" required />\n                    <br/>\n                    <input type=\"submit\" className=\"btn btn-success btn-submit mt-4\" onClick={this.saveTeacher} value=\"OK!\"/>     \n                </fieldset>\n            </form> */}\n\n            </>\n        );\n    }\n}\nexport default TeacherRegister;"]},"metadata":{},"sourceType":"module"}