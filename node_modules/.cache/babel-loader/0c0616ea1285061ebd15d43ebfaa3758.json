{"ast":null,"code":"var _jsxFileName = \"/Users/mhd.sad22/graduation-project/graduation-project/src/components/MyClasses.js\";\nimport React, { Component } from 'react';\nimport noImage from '../noImage.png';\n\nclass MyClasses extends Component {\n  constructor() {\n    super();\n\n    this.checkAttendence = e => {\n      //Create a reader to read an uploaded file .\n      var reader = new FileReader();\n      reader.readAsDataURL(e.target.files[0]);\n\n      reader.onload = event => {\n        //Get the uploaded image and store it in var image .\n        var image = new Image();\n        image.src = event.target.result; //Create to variable to store image width and height .\n\n        var imgHeight, imgWidth;\n\n        image.onload = async function () {\n          imgHeight = this.height;\n          imgWidth = this.width; //The function will store width and height values in State . \n\n          setData();\n        };\n\n        let setData = () => {\n          this.setState({\n            width: imgWidth,\n            height: imgHeight\n          });\n        };\n      };\n\n      const img = e.target;\n\n      if (img) {\n        this.setState({\n          file: URL.createObjectURL(e.target.files[0])\n        });\n        this.faceRecognition(img.files[0]);\n      }\n    };\n\n    this.faceRecognition = img => {\n      var myHeaders = new Headers();\n      myHeaders.append(\"token\", \"0ed0d51e90cc4f3ab510a564cfb94b60\");\n      var formdata = new FormData();\n      formdata.append(\"photo\", img, \"file\");\n      var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: formdata,\n        redirect: 'follow'\n      };\n      fetch(\"https://api.luxand.cloud/photo/search\", requestOptions).then(response => response.json()).then(result => {\n        //Define canvas to draw rectangle .\n        let canvas = document.getElementById('canvas');\n        let ctx = canvas.getContext('2d'); //Canvas properties .\n\n        ctx.strokeStyle = 'yellow';\n        ctx.fillStyle = 'yellow';\n        ctx.lineWidth = '5'; //Change the background of context to the uploaded image .\n\n        var image = document.getElementById('person');\n        ctx.drawImage(image, 0, 0);\n\n        for (var i in result) {\n          //Get the values of Rectangle .\n          let {\n            left\n          } = result[i].rectangle,\n              {\n            right\n          } = result[i].rectangle,\n              {\n            bottom\n          } = result[i].rectangle,\n              {\n            top\n          } = result[i].rectangle; //Determine the width and hight for rectangle .\n\n          let Dim = right - left; //Determine font size and the space between rectangle and text .\n\n          let space = parseInt(Dim / 3),\n              text = `${space}px Lobster`;\n          ctx.font = text; //Draw the rectangle .\n\n          ctx.strokeRect(left, top, Dim, Dim); //Type the name of person .\n\n          ctx.fillText(result[i].name, left, bottom + space);\n        }\n\n        var final_image = canvas.toDataURL(\"image/png\");\n        this.setState({\n          file: final_image\n        });\n        let obj = result;\n        console.log(obj);\n      }).catch(error => console.log('error', error));\n    };\n\n    this.state = {\n      file: null,\n      width: 0,\n      height: 0\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mt-3 bg-black-10 shadow-5 p-5 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"main-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, \"Upload an image to check attendence\"), /*#__PURE__*/React.createElement(\"input\", {\n      onChange: this.checkAttendence,\n      type: \"file\",\n      accept: \"image/*\",\n      id: \"file2\",\n      className: \"form-file mt-4\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      hidden: true,\n      id: \"person\",\n      src: this.state.file,\n      alt: \"Person\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"canvas\",\n      width: this.state.width,\n      height: this.state.height,\n      hidden: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      className: \"img-thumbnail mt-3\",\n      src: this.state.file || noImage,\n      alt: \"Person\",\n      width: \"600\",\n      height: \"600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default MyClasses;","map":{"version":3,"sources":["/Users/mhd.sad22/graduation-project/graduation-project/src/components/MyClasses.js"],"names":["React","Component","noImage","MyClasses","constructor","checkAttendence","e","reader","FileReader","readAsDataURL","target","files","onload","event","image","Image","src","result","imgHeight","imgWidth","height","width","setData","setState","img","file","URL","createObjectURL","faceRecognition","myHeaders","Headers","append","formdata","FormData","requestOptions","method","headers","body","redirect","fetch","then","response","json","canvas","document","getElementById","ctx","getContext","strokeStyle","fillStyle","lineWidth","drawImage","i","left","rectangle","right","bottom","top","Dim","space","parseInt","text","font","strokeRect","fillText","name","final_image","toDataURL","obj","console","log","catch","error","state","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react' ;\nimport noImage from '../noImage.png' ;\n\nclass MyClasses extends Component{\n    constructor(){\n        super() ;\n        this.state = {\n            file: null , \n            width : 0 ,\n            height : 0\n        }\n    }\n    checkAttendence = (e) => {\n        //Create a reader to read an uploaded file .\n        var reader = new FileReader();\n        reader.readAsDataURL(e.target.files[0]);\n        \n        reader.onload = (event) => {\n        //Get the uploaded image and store it in var image .\n        var image = new Image();\n        image.src = event.target.result;\n\n        //Create to variable to store image width and height .\n        var imgHeight , imgWidth ;\n        image.onload = async function () {\n            imgHeight = this.height ;\n            imgWidth = this.width ;\n\n            //The function will store width and height values in State . \n            setData() ;\n        }\n        let setData = () => {\n            this.setState({\n                width : imgWidth ,\n                height : imgHeight\n            }) ;\n        }\n    };\n        const img = e.target ;\n        if(img){\n            this.setState({\n                file: URL.createObjectURL(e.target.files[0])\n            })\n            this.faceRecognition(img.files[0]) ;\n        }\n    }\n\n    faceRecognition = (img) => {\n        var myHeaders = new Headers();\n        myHeaders.append(\"token\", \"0ed0d51e90cc4f3ab510a564cfb94b60\");\n\n        var formdata = new FormData();\n        formdata.append(\"photo\", img, \"file\");\n\n        var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: formdata,\n        redirect: 'follow'\n    };\n\n        fetch(\"https://api.luxand.cloud/photo/search\", requestOptions)\n        .then(response => response.json())\n        .then(result => {\n            \n            //Define canvas to draw rectangle .\n            let canvas = document.getElementById('canvas') ;\n            let ctx = canvas.getContext('2d') ;\n\n            //Canvas properties .\n            ctx.strokeStyle = 'yellow' ;\n            ctx.fillStyle = 'yellow' ;\n            ctx.lineWidth = '5' ;\n\n            //Change the background of context to the uploaded image .\n            var image = document.getElementById('person') ;\n            ctx.drawImage(image , 0 , 0) ;\n            for(var i in result){\n\n            //Get the values of Rectangle .\n            let {left} = result[i].rectangle ,\n            {right} = result[i].rectangle ,\n            {bottom} = result[i].rectangle ,\n            {top} = result[i].rectangle ;\n\n            //Determine the width and hight for rectangle .\n            let Dim = (right - left) ;\n\n            //Determine font size and the space between rectangle and text .\n            let space = parseInt(Dim / 3) ,\n            text = `${space}px Lobster`  ;\n            ctx.font = text ;\n\n            //Draw the rectangle .\n            ctx.strokeRect(left,top,Dim,Dim) ;\n\n            //Type the name of person .\n            ctx.fillText(result[i].name , left, bottom + space) ;\n            }\n            var final_image = canvas.toDataURL(\"image/png\");\n            this.setState({\n                file : final_image\n            });\n            let obj = result ;\n            console.log(obj) ;\n        })\n        .catch(error => console.log('error', error));\n    };\n\n\n    render() {\n        return (\n            <>\n                <div className=\"mt-3 bg-black-10 shadow-5 p-5 \">\n                    <h1 className=\"main-title\">Upload an image to check attendence</h1>\n                    <input onChange={this.checkAttendence} type=\"file\" accept=\"image/*\" id=\"file2\" className=\"form-file mt-4\" required />\n                    <br />\n\n                    {/* Image will display the uploaded image , we use it to draw it on canvas . */}\n                    <img hidden id=\"person\" src={this.state.file} alt=\"Person\" />\n\n                    {/* Canvas will draw the image , rectangles and names . */}\n                    <canvas id=\"canvas\" width={this.state.width} height={this.state.height} hidden></canvas>\n\n                    {/* The final result will be shown on the img below , that we can edit it's width and height . */}\n                    <img className=\"img-thumbnail mt-3\" src={this.state.file || noImage} alt=\"Person\" width=\"600\" height='600' />\n                </div>\n            </>);\n    }\n}\nexport default MyClasses ;\n"]},"metadata":{},"sourceType":"module"}